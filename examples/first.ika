// Simple variable declaration
declared_int : int
declared_float : float
// declared_string : string  -- This is a poorly reported error, fix it
declared_string : str
declared_boolean : bool
declared_rune : rune

// Simple untyped assignment
int_assignment := 10
string_assignment := "This is a string!"
bool_assignment := true
float_assignment := 100.5
returning := false
truenough := 100

// Simple typed assignment
typed_assignment : int = 10 * 1200


// Precedence
simple_multiplication := 10 * 5 * 3 * 8 * 2
simple_multiplication_and_division := 10 * 5 / 8 * 27 / 2
simple_subtraction := 10 - 5 - 3 - 2
simple_precedence := 10 - 5 * 3 - 2
simple_precedence_with_parens := (10 - 5) * 3 / 2 + 50 / 4
single_expression := (100 + 100)
var_expression := (100 + int_assignment)

// Invalid type conversion
//invalid_example := 5 / "the"
//invalid_example_2 : int = "the"

// Type conversion
type_conversion_int_to_float := (10 - 5) * 3 / 2 + 50 / 4.0

// Expressions with identifiers
{
    x:= 5

    fourtyfive := 4 * x
}

// This defines an inner scope
{
    let my_const := 45
    another_var : int = 100
}

// If statement single block
if (false) {
  let t := true
}

// If statement with else block
if (10 + 1 == 11) {
  let bang := 100
} else {
  boom := 50
}

// Simple function that returns void
fn nothing() {
  i_do_nothing := 1
}

// Simple function that returns an int
fn double(x: int): int {
  return x * 2
}

fn multiply(x: int, y: int, z: int): int {
  return x * y * z
}

fn i_should_return(x: int, y: int, z: int): int {
  return x * y * z
}

//doubled_int := double(10)
a_simple_assignment_at_the_end := 1000

// Alternate syntax for functions...
//double := (x int, y int) int {
//  return x * y
//}
