#pragma once

typedef enum {
  ika_unknown,

  __ika_types_start,
  ika_i64,
  ika_u64,
  ika_i32,
  ika_u32,
  ika_i16,
  ika_u16,
  ika_i8,
  ika_u8,
  ika_f64,
  ika_f32,
  ika_f16,
  ika_bool,
  ika_str,
  ika_rune,
  ika_any,
  ika_void,
  __ika_types_end,

  ika_identifier,

  __ika_literal_start,
  ika_num_literal,
  ika_int_literal,
  ika_float_literal,
  ika_str_literal,
  __ika_literal_end,

  __ika_operators_start,
  ika_add,
  ika_sub,
  ika_mul,
  ika_quo,
  ika_mod,
  ika_eql,
  ika_neq,
  ika_incr,
  ika_decr,
  ika_untyped_assign,
  ika_bang,
  ika_assign,
  __ika_operators_end,

  // Braces
  ika_paren_open,
  ika_paren_close,
  ika_brace_open,
  ika_brace_close,
  ika_box_open,
  ika_box_close,

  ika_semi_colon,
  ika_colon,
  ika_comma,
  ika_dot,

  __ika_keywords_start,
  ika_keyword_ns,
  ika_keyword_import,
  ika_keyword_let,
  ika_keyword_fn,
  ika_keyword_var,
  ika_keyword_match,
  ika_keyword_test,
  ika_keyword_return,
  ika_keyword_if,
  ika_keyword_else,
  __ika_keywords_end,

  ika_comment,
  ika_eof,
} e_ika_type;

typedef struct {
  const char *txt;
  e_ika_type type;
  const char *label;
} ika_type_map_entry_t;

static ika_type_map_entry_t ika_base_type_table[] = {
    // Operators
    {.txt = "+", .type = ika_add, .label = "ika_add"},
    {.txt = "-", .type = ika_sub, .label = "ika_sub"},
    {.txt = "*", .type = ika_mul, .label = "ika_mul"},
    {.txt = "/", .type = ika_quo, .label = "ika_quo"},
    {.txt = "%", .type = ika_mod, .label = "ika_mod"},
    {.txt = ";", .type = ika_semi_colon, .label = "ika_semi_colon"},
    {.txt = ":", .type = ika_colon, .label = "ika_colon"},
    {.txt = "(", .type = ika_paren_open, .label = "ika_paren_open"},
    {.txt = ")", .type = ika_paren_close, .label = "ika_paren_close"},
    {.txt = "[", .type = ika_box_open, .label = "ika_box_open"},
    {.txt = "]", .type = ika_box_close, .label = "ika_box_close"},
    {.txt = "{", .type = ika_brace_open, .label = "ika_brace_open"},
    {.txt = "}", .type = ika_brace_close, .label = "ika_brace_close"},
    {.txt = ",", .type = ika_comma, .label = "ika_comma"},
    {.txt = "=", .type = ika_assign, .label = "ika_assign"},
    {.txt = "!", .type = ika_bang, .label = "ika_bang"},
    {.txt = ".", .type = ika_dot, .label = "ika_dot"},
    {.txt = "==", .type = ika_eql, .label = "ika_eql"},
    {.txt = "!=", .type = ika_neq, .label = "ika_neq"},
    {.txt = "+=", .type = ika_incr, .label = "ika_incr"},
    {.txt = "-=", .type = ika_decr, .label = "ika_decr"},
    {.txt = ":=", .type = ika_untyped_assign, .label = "ika_untyped_assign"},
    // Types
    {.txt = "i64", .type = ika_i64, .label = "i64"},
    {.txt = "u64", .type = ika_u64, .label = "u64"},
    {.txt = "i32", .type = ika_i32, .label = "i32"},
    {.txt = "u32", .type = ika_u32, .label = "u32"},
    {.txt = "i16", .type = ika_i16, .label = "i16"},
    {.txt = "u16", .type = ika_u16, .label = "u16"},
    {.txt = "i8", .type = ika_i8, .label = "i8"},
    {.txt = "u8", .type = ika_u8, .label = "u8"},
    {.txt = "f64", .type = ika_f64, .label = "f64"},
    {.txt = "f32", .type = ika_f32, .label = "f32"},
    {.txt = "f16", .type = ika_f16, .label = "f16"},
    {.txt = "bool", .type = ika_bool, .label = "bool"},
    {.txt = "str", .type = ika_str, .label = "str"},
    {.txt = "rune", .type = ika_rune, .label = "rune"},
    {.txt = "void", .type = ika_void, .label = "ika_void"},
    {.txt = "any", .type = ika_any, .label = "ika_any"},
    // Keywords
    {.txt = "ns", .type = ika_keyword_ns, .label = "ika_keyword_ns"},
    {.txt = "import",
     .type = ika_keyword_import,
     .label = "ika_keyword_import"},
    {.txt = "let", .type = ika_keyword_let, .label = "ika_keyword_let"},
    {.txt = "fn", .type = ika_keyword_fn, .label = "ika_keyword_fn"},
    {.txt = "var", .type = ika_keyword_var, .label = "ika_keyword_var"},
    {.txt = "match", .type = ika_keyword_match, .label = "ika_keyword_match"},
    {.txt = "test", .type = ika_keyword_test, .label = "ika_keyword_test"},
    {.txt = "return",
     .type = ika_keyword_return,
     .label = "ika_keyword_return"},
    {.txt = "if", .type = ika_keyword_if, .label = "ika_keyword_if"},
    {.txt = "else", .type = ika_keyword_else, .label = "ika_keyword_else"},
};
