
* DONE Fix parsing
* DONE Have tokenizer add line/column to tokens
* DONE Add symbol table logic to parsing
* DONE [Decision] Do not convert to pika parser
* DONE operator precedence
* DONE unify error storage and reporting
* DONE fix tokenizer to check for keywords/types as part of identifier processing
* DONE Symbol table pass
** DONE Add a scope for function parameters
* DONE Simplify types (just int, float, string, bool, rune/char)
* DONE Handle simple assignment to defined var
* DONE Handle calling a function
* DONE Figure out what information is needed in the symbol table for functions
* DONE Handle a function being part of an expression ( 2 * double(4) )
* NO Remove symbol_t and use char * for identifiers in the ast nodes.
* DONE Stop using str, and revert to char *  (big update)
* NO Move errors out to a separate file, and use an enum
* DONE Use parse_decl in assignment and remove the untyped assign operator
* DONE add macros for dynarray
* DONE Move allocator to be static reference so it doesn't need to be passed around
* DONE Visit every nested block in a function a prove all exits have required returns
* NO Rename block to scope??
* DONE Command line flag for printing out debug structures (tokens, parse tree, symbol tables, etc)
* DONE Improve printing of symbol tables, and print the heirarchy
* DONE Find a better way to map ika_types to target literals
* TODO Move main Ika type map to use the C11 type map method
* TODO Allow functions with the same name but different type sigs
* TODO Implement base allocator
* TODO Implement constant folding
* TODO Implement context
* TODO Implement pointers and references
* TODO Implement arrays, and dynamic arrays
* TODO Implement additional operators
* TODO Implement all expression precedences
* TODO Find and fix segfaults
* TODO Move print from keyword to function
* TODO Trait/Behavior semantics
* TODO Implement using keyword
** Try to limit pointers in favor of values
* TODO Use levenstein(sp?) distance to detect symbol typos
* TODO Add more asserts to switch statements default case
* TODO Better error messages!
** TODO Add end statement token based on newline or semi colon (Useful for error messaging)
* DONE Add semantic analysis
** DONE Add type checking
** DONE prevent assignment to constants
** DONE prevent using undeclared identifiers
* IDEA Define my own IR, and possibly a VM for executing code at compile time
** TODO IR design
** TODO Bytecode generation
* TODO Transpile to C for the initial compiler.
** DONE Setup a c11 backend
** TODO Decide on value semantics (base object? dynamic function writing?)
** TODO How to handle output?
** TODO How to handle modules?
** TODO Main function handling?
** TODO Function naming?  (Add type sig? Or create struct for different parameter combos?)
** TODO Build out a small runtime library in C for supporting this language
* HOLD Investigate QBE or FASM for backend
* HOLD Make true/false reserved words as well as values??
* HOLD Update compilation_unit to store everything related to compilation?
* HOLD Compile cleanly with all warning flags set
