#+title: Ika language thoughts

Language features are nice, but every one of them makes the language more
complex and harder to learn.  Can the language be tiny but have the right
tools to allow it to be sculpted to the task at hand?

Seems like there's a tradeoff around what "simple" means.  Something super
simple like Forth givens immense freedom, but very little direction.  In
the hands of a master this is probably a good thing, but in the hands of
mere humans it's probably too little direction.  It seems like there is
an artful balance between too simple and not simple enough.

Should the language be combined with a code authoring environment?

* Copying parameters vs reference?
**   Mutable vs. immutable parameters?
* Closures are supposedly expensive/complex
* Named parameters with defaults are really nice
* Returning multiple values is very useful
* Pattern matching is way nicer then nested ifs
* Functions/procedures as first class citizens enables an appealing style
**   Decorators ala Python?
* Tagged enums are a really nice idea
* Ditto with unions
* Zig gets (monomophism?) right in my opinion
* Odin prioritizes developer joy and it shows
* Erlang supervision trees and message passing are very cool (probably too costly performance wise)
* Pattern matching is very powerful in many contexts
* Procedure threading or perhaps chaining makes for nice flow


How small can I make the core language?

    The language needs a way to alloc and free memory.
        Safety vs speed here is a major tradeoff it seems.
    Need types, assignment, branching (if/else)
    Can I delay evaluation?  (While/for as functions?)
        Can I use some sort of yield to implement looping?
        Which is more fundamental while or for?


Error handling ideas:

    Zig like optionals/enums?
    Pattern matching on the return value?
    Multiple returns ala Go/Odin?



Ideas from crafting interpreters book:

* Scan identifiers first, then check if they are keywords/types.

* Precedence: == != then > >= < <= then - + then / * then (unary ! -)
** Update parser to use this structure:
*** expression
*** equality
*** comparison
*** term
*** factor
*** unary
*** primary (int, str, identifier)
